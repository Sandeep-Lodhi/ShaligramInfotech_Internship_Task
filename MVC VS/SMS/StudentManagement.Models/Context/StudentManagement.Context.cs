//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudentManagement.Models.Context
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SP355SanjayPrajapatiEntities : DbContext
    {
        public SP355SanjayPrajapatiEntities()
            : base("name=SP355SanjayPrajapatiEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<Standard> Standard { get; set; }
        public virtual DbSet<State> State { get; set; }
        public virtual DbSet<Student> Student { get; set; }
        public virtual DbSet<StudentSubject> StudentSubject { get; set; }
        public virtual DbSet<StudentTeacher> StudentTeacher { get; set; }
        public virtual DbSet<Subject> Subject { get; set; }
        public virtual DbSet<Teacher> Teacher { get; set; }
        public virtual DbSet<TeacherSubject> TeacherSubject { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserRole> UserRole { get; set; }
        public virtual DbSet<StandardSubject> StandardSubject { get; set; }
    
        public virtual int Sp_AddDeleteStudentSubject(string action, Nullable<int> studentId, Nullable<int> subjectId)
        {
            var actionParameter = action != null ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(string));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddDeleteStudentSubject", actionParameter, studentIdParameter, subjectIdParameter);
        }
    
        public virtual int Sp_AddDeleteStudentTeacher(string action, Nullable<int> studentId, Nullable<int> teacherId)
        {
            var actionParameter = action != null ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(string));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("TeacherId", teacherId) :
                new ObjectParameter("TeacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddDeleteStudentTeacher", actionParameter, studentIdParameter, teacherIdParameter);
        }
    
        public virtual int Sp_AddDeleteTeacherSubject(string action, Nullable<int> teacherId, Nullable<int> subjectId)
        {
            var actionParameter = action != null ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(string));
    
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("TeacherId", teacherId) :
                new ObjectParameter("TeacherId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddDeleteTeacherSubject", actionParameter, teacherIdParameter, subjectIdParameter);
        }
    
        public virtual int Sp_AddDeleteUserRole(string action, Nullable<int> userId, Nullable<int> roleId)
        {
            var actionParameter = action != null ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddDeleteUserRole", actionParameter, userIdParameter, roleIdParameter);
        }
    
        public virtual int Sp_AddEditCity(Nullable<int> cityId, string cityName, Nullable<int> countryId, Nullable<int> stateId)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddEditCity", cityIdParameter, cityNameParameter, countryIdParameter, stateIdParameter);
        }
    
        public virtual int Sp_AddEditCountry(Nullable<int> countryId, string countryName)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddEditCountry", countryIdParameter, countryNameParameter);
        }
    
        public virtual int Sp_AddEditRole(Nullable<int> roleId, string roleName)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddEditRole", roleIdParameter, roleNameParameter);
        }
    
        public virtual int Sp_AddEditStandard(Nullable<int> standardId, string standardName)
        {
            var standardIdParameter = standardId.HasValue ?
                new ObjectParameter("StandardId", standardId) :
                new ObjectParameter("StandardId", typeof(int));
    
            var standardNameParameter = standardName != null ?
                new ObjectParameter("StandardName", standardName) :
                new ObjectParameter("StandardName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddEditStandard", standardIdParameter, standardNameParameter);
        }
    
        public virtual int Sp_AddEditState(Nullable<int> stateId, string stateName, Nullable<int> countryId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddEditState", stateIdParameter, stateNameParameter, countryIdParameter);
        }
    
        public virtual int Sp_AddEditStudent(Nullable<int> studentId, string studentFirstName, string studentLastName, string studentAddress, string studentMobileNo, string studentEmail, string studentGenderName, Nullable<System.DateTime> studentDOB, Nullable<int> studentStandardId, Nullable<int> studentCountryId, Nullable<int> studentStateId, Nullable<int> studentCityId, string studentSubjects, string studentTeachers)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var studentFirstNameParameter = studentFirstName != null ?
                new ObjectParameter("StudentFirstName", studentFirstName) :
                new ObjectParameter("StudentFirstName", typeof(string));
    
            var studentLastNameParameter = studentLastName != null ?
                new ObjectParameter("StudentLastName", studentLastName) :
                new ObjectParameter("StudentLastName", typeof(string));
    
            var studentAddressParameter = studentAddress != null ?
                new ObjectParameter("StudentAddress", studentAddress) :
                new ObjectParameter("StudentAddress", typeof(string));
    
            var studentMobileNoParameter = studentMobileNo != null ?
                new ObjectParameter("StudentMobileNo", studentMobileNo) :
                new ObjectParameter("StudentMobileNo", typeof(string));
    
            var studentEmailParameter = studentEmail != null ?
                new ObjectParameter("StudentEmail", studentEmail) :
                new ObjectParameter("StudentEmail", typeof(string));
    
            var studentGenderNameParameter = studentGenderName != null ?
                new ObjectParameter("StudentGenderName", studentGenderName) :
                new ObjectParameter("StudentGenderName", typeof(string));
    
            var studentDOBParameter = studentDOB.HasValue ?
                new ObjectParameter("StudentDOB", studentDOB) :
                new ObjectParameter("StudentDOB", typeof(System.DateTime));
    
            var studentStandardIdParameter = studentStandardId.HasValue ?
                new ObjectParameter("StudentStandardId", studentStandardId) :
                new ObjectParameter("StudentStandardId", typeof(int));
    
            var studentCountryIdParameter = studentCountryId.HasValue ?
                new ObjectParameter("StudentCountryId", studentCountryId) :
                new ObjectParameter("StudentCountryId", typeof(int));
    
            var studentStateIdParameter = studentStateId.HasValue ?
                new ObjectParameter("StudentStateId", studentStateId) :
                new ObjectParameter("StudentStateId", typeof(int));
    
            var studentCityIdParameter = studentCityId.HasValue ?
                new ObjectParameter("StudentCityId", studentCityId) :
                new ObjectParameter("StudentCityId", typeof(int));
    
            var studentSubjectsParameter = studentSubjects != null ?
                new ObjectParameter("StudentSubjects", studentSubjects) :
                new ObjectParameter("StudentSubjects", typeof(string));
    
            var studentTeachersParameter = studentTeachers != null ?
                new ObjectParameter("StudentTeachers", studentTeachers) :
                new ObjectParameter("StudentTeachers", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddEditStudent", studentIdParameter, studentFirstNameParameter, studentLastNameParameter, studentAddressParameter, studentMobileNoParameter, studentEmailParameter, studentGenderNameParameter, studentDOBParameter, studentStandardIdParameter, studentCountryIdParameter, studentStateIdParameter, studentCityIdParameter, studentSubjectsParameter, studentTeachersParameter);
        }
    
        public virtual int Sp_AddEditSubject(Nullable<int> subjectId, string subjectName)
        {
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            var subjectNameParameter = subjectName != null ?
                new ObjectParameter("SubjectName", subjectName) :
                new ObjectParameter("SubjectName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddEditSubject", subjectIdParameter, subjectNameParameter);
        }
    
        public virtual int Sp_AddEditTeacher(Nullable<int> teacherId, string teacherFirstName, string teacherLastName, string teacherAddress, string teacherMobileNo, string teacherEmail, string teacherGenderName, Nullable<System.DateTime> teacherDOB, Nullable<int> teacherCountryId, Nullable<int> teacherStateId, Nullable<int> teacherCityId)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("TeacherId", teacherId) :
                new ObjectParameter("TeacherId", typeof(int));
    
            var teacherFirstNameParameter = teacherFirstName != null ?
                new ObjectParameter("TeacherFirstName", teacherFirstName) :
                new ObjectParameter("TeacherFirstName", typeof(string));
    
            var teacherLastNameParameter = teacherLastName != null ?
                new ObjectParameter("TeacherLastName", teacherLastName) :
                new ObjectParameter("TeacherLastName", typeof(string));
    
            var teacherAddressParameter = teacherAddress != null ?
                new ObjectParameter("TeacherAddress", teacherAddress) :
                new ObjectParameter("TeacherAddress", typeof(string));
    
            var teacherMobileNoParameter = teacherMobileNo != null ?
                new ObjectParameter("TeacherMobileNo", teacherMobileNo) :
                new ObjectParameter("TeacherMobileNo", typeof(string));
    
            var teacherEmailParameter = teacherEmail != null ?
                new ObjectParameter("TeacherEmail", teacherEmail) :
                new ObjectParameter("TeacherEmail", typeof(string));
    
            var teacherGenderNameParameter = teacherGenderName != null ?
                new ObjectParameter("TeacherGenderName", teacherGenderName) :
                new ObjectParameter("TeacherGenderName", typeof(string));
    
            var teacherDOBParameter = teacherDOB.HasValue ?
                new ObjectParameter("TeacherDOB", teacherDOB) :
                new ObjectParameter("TeacherDOB", typeof(System.DateTime));
    
            var teacherCountryIdParameter = teacherCountryId.HasValue ?
                new ObjectParameter("TeacherCountryId", teacherCountryId) :
                new ObjectParameter("TeacherCountryId", typeof(int));
    
            var teacherStateIdParameter = teacherStateId.HasValue ?
                new ObjectParameter("TeacherStateId", teacherStateId) :
                new ObjectParameter("TeacherStateId", typeof(int));
    
            var teacherCityIdParameter = teacherCityId.HasValue ?
                new ObjectParameter("TeacherCityId", teacherCityId) :
                new ObjectParameter("TeacherCityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddEditTeacher", teacherIdParameter, teacherFirstNameParameter, teacherLastNameParameter, teacherAddressParameter, teacherMobileNoParameter, teacherEmailParameter, teacherGenderNameParameter, teacherDOBParameter, teacherCountryIdParameter, teacherStateIdParameter, teacherCityIdParameter);
        }
    
        public virtual int Sp_AddEditUser(Nullable<int> userId, string userFirstName, string userLastName, string userName, string userEmail, string userPassWord)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userFirstNameParameter = userFirstName != null ?
                new ObjectParameter("UserFirstName", userFirstName) :
                new ObjectParameter("UserFirstName", typeof(string));
    
            var userLastNameParameter = userLastName != null ?
                new ObjectParameter("UserLastName", userLastName) :
                new ObjectParameter("UserLastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userPassWordParameter = userPassWord != null ?
                new ObjectParameter("UserPassWord", userPassWord) :
                new ObjectParameter("UserPassWord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddEditUser", userIdParameter, userFirstNameParameter, userLastNameParameter, userNameParameter, userEmailParameter, userPassWordParameter);
        }
    
        public virtual ObjectResult<Sp_GetTeacherBySubjectId_Result> Sp_GetTeacherBySubjectId(string subjectId)
        {
            var subjectIdParameter = subjectId != null ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetTeacherBySubjectId_Result>("Sp_GetTeacherBySubjectId", subjectIdParameter);
        }
    
        public virtual ObjectResult<Sp_GetStateByCountry_Result> Sp_GetStateByCountry(Nullable<int> countryId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetStateByCountry_Result>("Sp_GetStateByCountry", countryIdParameter);
        }
    
        public virtual ObjectResult<Sp_GetCityByStateId_Result> Sp_GetCityByStateId(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetCityByStateId_Result>("Sp_GetCityByStateId", stateIdParameter);
        }
    
        public virtual int DeleteStudentById(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStudentById", studentIdParameter);
        }
    }
}
